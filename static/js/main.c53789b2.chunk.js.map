{"version":3,"sources":["components/modal/Modal.js","components/table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","handleChange","event","setState","target","id","value","handleSubmit","e","preventDefault","data","n","parseInt","state","tableValues","x","m","w","d","console","log","reaction","handleCancel","color","className","onSubmit","this","onReset","type","onChange","disabled","window","innerWidth","defaultValue","Component","Table","reverseTable","array","map","row","index","reverse","createTable","numOfItems","rows","Math","ceil","table","val","i","j","push","getDirection","rowNum","numRows","handleConfigureReaction","result","showModal","style","width","margin","key","length","item","onClick","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c53789b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Modal.scss'\n\nclass Modal extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            n: this.props.tableValues.n,\n            x: this.props.tableValues.x,\n            m: this.props.tableValues.m,\n            w: this.props.tableValues.w,\n            d: this.props.tableValues.d,\n            color: this.props.tableValues.color,\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let data = {\n            n: parseInt(this.state.n) ? parseInt(this.state.n) : this.props.tableValues.n,\n            x: parseInt(this.state.x) ? parseInt(this.state.x) : this.props.tableValues.x,\n            m: parseInt(this.state.m) ? parseInt(this.state.m) : this.props.tableValues.m,\n            w: parseInt(this.state.w) ? parseInt(this.state.w) : this.props.tableValues.w,\n            d: this.state.d,\n        }\n        console.log(data);\n        this.props.reaction(data);\n    }\n\n    handleCancel = (e) => {\n        e.preventDefault();\n        this.props.reaction('cancel');\n    }\n    \n    render(){\n        return (\n            <div className=\"modal\">\n                <div className=\"container modal-container\">\n                    <form onSubmit={this.handleSubmit} onReset={this.handleCancel}>\n                        <h5>Color: {this.state.color}</h5>\n                        <div className=\"input-field\">\n                            <span>N</span>\n                            =\n                            <input\n                                type=\"text\"\n                                id=\"n\"\n                                value={this.state.n}\n                                onChange={this.handleChange}\n                            />\n                        </div>\n                        <div className=\"input-field\">\n                            <span>X</span>\n                            =\n                            <input\n                                type=\"text\"\n                                id=\"x\"\n                                value={this.state.x}\n                                onChange={this.handleChange}\n                            />\n                        </div>\n                        <div className=\"input-field\">\n                            <span>M</span>\n                            =\n                            <input\n                                type=\"text\"\n                                id=\"m\"\n                                value={this.state.m}\n                                onChange={this.handleChange}\n                            />\n                        </div>\n                        <div className=\"input-field\">\n                            <span>W</span>\n                            =\n                            <input\n                                type=\"text\"\n                                id=\"w\"\n                                value={this.state.w}\n                                disabled={window.innerWidth <= 812 ? true : false}\n                                onChange={this.handleChange}\n                            />\n                        </div>\n                        <div className=\"input-field\">\n                            <span>D</span>\n                            =\n                            <select id=\"d\" onChange={this.handleChange} defaultValue={this.state.d}>\n                                <option id=\"default\" value=\"ltr-up\">LTR-UP</option>\n                                <option id=\"default\" value=\"ltr-dn\">LTR-DN</option>\n                                <option id=\"default\" value=\"rtl-up\">RTL-UP</option>\n                                <option id=\"default\" value=\"rtl-dn\">RTL-DN</option>\n                            </select>\n                        </div>\n                        <button className=\"btn btn-primary my-sm\" type=\"submit\">OK</button>\n                        &nbsp;\n                        <button className=\"btn btn-primary my-sm\" type=\"reset\">Cancel</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport Modal from '../modal/Modal';\n\nimport './Table.scss';\n\nclass Table extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            n: this.props.tableValues.n,\n            x: this.props.tableValues.x,\n            m: this.props.tableValues.m,\n            w: this.props.tableValues.w,\n            d: this.props.tableValues.d,\n            color: this.props.tableValues.color,\n            showModal: false\n        }\n    }\n\n    reverseTable = (array) => {\n        array.map((row, index) => (\n            row.reverse()\n        ));\n        array.reverse();\n    }\n\n    createTable = () => {\n        let numOfItems = (this.state.m - this.state.n) / this.state.x\n        let rows = Math.ceil(numOfItems/ 5);\n\n        let table = [];\n        let val = this.state.n\n        for (let i = 0; i < rows; i++){\n            let row = [];\n            for (let j = 0; j < 5; j++){\n                if (val <= this.state.m){\n                    row.push(val);\n                }\n                else{\n                    row.push(\"\");\n                }\n                val += this.state.x;\n            }\n            table.push(row);\n        }\n\n        if (this.state.d === 'ltr-up' || this.state.d === 'rtl-up'){\n            this.reverseTable(table);\n        }\n        return table\n    }\n\n    getDirection = (rowNum, numRows) => {\n        //odd number of rows -- necessary since grid builds from the top down and I have to reverse the array\n        if (numRows % 2 === 1){\n            if (this.state.d === 'ltr-up' || this.state.d === 'rtl-dn'){\n                return rowNum % 2 === 0 ? 'reverse' : ''\n            }\n            else if (this.state.d === 'ltr-dn' || this.state.d === 'rtl-up'){\n                return rowNum % 2 === 1 ? 'reverse' : ''\n            }\n        }\n        //even number of rows\n        else{\n            if (this.state.d === 'ltr-up' || this.state.d === 'ltr-dn'){\n                return rowNum % 2 === 1 ? 'reverse' : ''\n            }\n            else if (this.state.d === 'rtl-dn' || this.state.d === 'rtl-up'){\n                return rowNum % 2 === 0 ? 'reverse' : ''\n            }\n        }\n\n    }\n\n    handleConfigureReaction = (result) => {\n        if (result === 'cancel'){\n            this.setState({ showModal: false});\n        }\n        else{\n            this.setState({\n                ...result,\n                showModal: false\n            });\n        }\n    }\n\n    render() {\n        let table = this.createTable();\n        return (\n            <div style={{width: `${this.state.w}%`, margin: '20px'}} id={this.state.color}>\n                <div className={`table ${this.state.color}`} >\n                    {table.map((row, index) => (\n                        <div key={index} className={`row ${this.getDirection(index, table.length)}`}>\n                            {row.map((item, index) => (\n                                <div key={index} className={`grid-item ${item === '' ? 'gray' : ''}`}>{item}</div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n                <button onClick={() => this.setState({showModal: true})}>Configure</button>\n                {this.state.showModal &&\n                    <Modal reaction={this.handleConfigureReaction} tableValues={this.state} />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Table\n","import React, { Component } from 'react';\nimport Table from './components/table/Table';\nimport './App.scss';\n\nclass App extends Component {\n    render() {\n        const tableRed = {\n            n: 8,\n            x: 1,\n            m: 29,\n            w: 20,\n            d: 'ltr-up',\n            color: 'red'\n        };\n        const tableGreen = {\n            n: 231,\n            x: 1,\n            m: 247,\n            w: 30,\n            d: 'ltr-up',\n            color: 'green'\n        };\n        const tableBlue = {\n            n: 47,\n            x: 2,\n            m: 81,\n            w: 40,\n            d: 'ltr-up',\n            color: 'blue'\n        };\n\n        return (\n            <div>\n                <div className=\"container\">\n                    <Table tableValues={tableRed}/>\n                    <Table tableValues={tableGreen}/>\n                    <Table tableValues={tableBlue}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}